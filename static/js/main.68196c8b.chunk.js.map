{"version":3,"sources":["DefaultFeeds.js","SettingsPage.js","TopBar.js","TopFeeds.js","App.js","serviceWorker.js","store.js","index.js"],"names":["defaultFeeds","name","url","querystring","require","schema","yup","required","matches","observer","feedsStore","useState","initialized","setInitialized","redirectToFeed","handleSubmit","evt","a","setSubmitting","setErrors","resetForm","validate","feeds","push","setFeeds","localStorage","setItem","JSON","stringify","submit","message","deleteFeed","index","splice","useEffect","rssFeeds","color","parse","getItem","Array","isArray","ex","console","log","setDarkMode","to","encode","feed","className","variant","darkmode","onClick","e","validationSchema","onSubmit","initialValues","handleChange","values","handleBlur","touched","errors","isInvalid","noValidate","Row","Group","as","Col","md","controlId","Control","type","placeholder","value","onChange","Feedback","removeItem","map","f","i","key","Title","Subtitle","style","paddingLeft","Body","bind","bg","expand","Brand","textDecoration","Toggle","aria-controls","Collapse","id","Link","href","Feed","striptags","he","_","withRouter","allListings","setListings","list","getListing","load","err","rss","items","item","sourceName","title","newList","uniqBy","flat","openLink","window","open","length","sort","item1","item2","d1","Date","pubDate","getTime","li","undefined","Header","Text","decode","description","substring","ReactTimeAgo","date","link","path","exact","component","props","TopFeeds","Boolean","location","hostname","match","FeedsStore","this","decorate","observable","action","setSelectedFeed","JavascriptTimeAgo","locale","en","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68196c8b.chunk.js","sourcesContent":["const defaultFeeds = [\r\n  { name: \"BBC News\", url: \"http://feeds.bbci.co.uk/news/rss.xml\" },\r\n  { name: \"The Intercept\", url: \"https://theintercept.com/feed/?lang=en\" },\r\n  { name: \"Al Jazeera\", url: \"http://www.aljazeera.com/xml/rss/all.xml\" },\r\n  { name: \"UPI News\", url: \"http://rss.upi.com/news/top_news.rss\" },\r\n  { name: \"Newsday\", url: \"http://www.newsday.com/cmlink/1.1284874\" },\r\n  { name: \"The IB Times\", url: \"http://www.ibtimes.com/rss\" },\r\n  {\r\n    name: \"NY Times\",\r\n    url: \"http://rss.nytimes.com/services/xml/rss/nyt/World.xml\",\r\n  },\r\n  {\r\n    name: \"Fox News\",\r\n    url: \"http://feeds.foxnews.com/foxnews/politics?format=xml\",\r\n  },\r\n  {\r\n    name: \"Reuters\",\r\n    url: \"http://feeds.reuters.com/reuters/topNews?format=xml\",\r\n  },\r\n  {\r\n    name: \"Zero Hedge\",\r\n    url: \"http://feeds.feedburner.com/zerohedge/feed?format=xml\",\r\n  },\r\n  { name: \"NPR\", url: \"http://www.npr.org/rss/rss.php?id=1001\" },\r\n  { name: \"TMZ\", url: \"http://www.tmz.com/category/politix/rss.xml\" },\r\n  { name: \"NY POST\", url: \"http://nypost.com/news/feed/\" },\r\n  { name: \"The Guardian World\", url: \"https://www.theguardian.com/world/rss\" },\r\n  { name: \"The Guardian US\", url: \"https://www.theguardian.com/us-news/rss\" },\r\n  {\r\n    name: \"The Daily Mail US\",\r\n    url: \"https://www.dailymail.co.uk/ushome/index.rss\",\r\n  },\r\n  {\r\n    name: \"The Daily Mail World\",\r\n    url: \"https://www.dailymail.co.uk/news/worldnews/index.rss\",\r\n  },\r\n  { name: \"The Sun\", url: \"https://www.thesun.co.uk/news/worldnews/feed/\" },\r\n  { name: \"The Hill\", url: \"https://thehill.com/rss/syndicator/19109\" },\r\n  { name: \"PBS\", url: \"https://www.pbs.org/newshour/feeds/rss/headlines\" },\r\n  {\r\n    name: \"Washington Examiner\",\r\n    url: \"https://www.washingtonexaminer.com/tag/news.rss\",\r\n  },\r\n  { name: \"CBS News\", url: \"https://www.cbsnews.com/latest/rss/main\" },\r\n  { name: \"Politico\", url: \"https://www.politico.com/rss/politicopicks.xml\" },\r\n  {\r\n    name: \"CNBC\",\r\n    url: \"https://www.cnbc.com/id/100727362/device/rss/rss.html\",\r\n  },\r\n  { name: \"LA Times\", url: \"https://www.latimes.com/world-nation.rss\" },\r\n  { name: \"Independent\", url: \"http://www.independent.co.uk/news/world/rss\" },\r\n  { name: \"News Week\", url: \"http://www.newsweek.com/rss\" },\r\n  { name: \"NBC News\", url: \"http://feeds.nbcnews.com/nbcnews/public/news\" },\r\n  { name: \"SCMP\", url: \"https://www.scmp.com/rss/91/feed\" },\r\n  { name: \"Sky News\", url: \"http://feeds.skynews.com/feeds/rss/world.xml\" },\r\n  { name: \"CBC\", url: \"https://www.cbc.ca/cmlink/rss-world\" },\r\n  { name: \"Global News\", url: \"https://globalnews.ca/category/world/feed/\" },\r\n  {\r\n    name: \"Chicago Tribune\",\r\n    url: \"https://www.chicagotribune.com/arcio/rss/category/nation-world\",\r\n  },\r\n  { name: \"Daily Caller\", url: \"http://dailycaller.com/feed/\" },\r\n  { name: \"Reason\", url: \"https://reason.com/feed/\" },\r\n];\r\nexport default defaultFeeds;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./HomePage.css\";\r\nimport { observer } from \"mobx-react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { Formik } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as yup from \"yup\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport defaultFeeds from \"./DefaultFeeds\";\r\nconst querystring = require(\"querystring\");\r\n\r\nconst schema = yup.object({\r\n  name: yup.string().required(\"URL is required\"),\r\n  url: yup\r\n    .string()\r\n    .required(\"URL is required\")\r\n    .matches(\r\n      /(https?:\\/\\/)?([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)/,\r\n      \"Invalid URL\"\r\n    ),\r\n});\r\n\r\nfunction SettingsPage({ feedsStore }) {\r\n  const [initialized, setInitialized] = useState(false);\r\n  const [redirectToFeed, setRedirectToFeed] = useState(false);\r\n\r\n  const handleSubmit = async (evt, { setSubmitting, setErrors, resetForm }) => {\r\n    try {\r\n      await schema.validate(evt);\r\n      resetForm({});\r\n      feedsStore.feeds.push(evt);\r\n      feedsStore.setFeeds(feedsStore.feeds);\r\n      localStorage.setItem(\"newsfeeds\", JSON.stringify(feedsStore.feeds));\r\n    } catch (error) {\r\n      setSubmitting(false);\r\n      setErrors({ submit: error.message });\r\n    }\r\n  };\r\n\r\n  const setSelectedFeed = (url) => {\r\n    feedsStore.setSelectedFeed(url);\r\n    setRedirectToFeed(true);\r\n  };\r\n\r\n  const deleteFeed = (index) => {\r\n    feedsStore.feeds.splice(index, 1);\r\n    feedsStore.setFeeds(feedsStore.feeds);\r\n    localStorage.setItem(\"newsfeeds\", JSON.stringify(feedsStore.feeds));\r\n  };\r\n\r\n  const resetSettings = () => {\r\n    localStorage.removeItem(\"newsfeeds\");\r\n    setInitialized(false);\r\n  };\r\n\r\n  const darkModeSettings = (e) => {\r\n    feedsStore.setDarkMode(e);\r\n    localStorage.setItem(\"darkmode\", JSON.stringify(e));\r\n    console.log(\"darkmode ran  \" + e);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!initialized) {\r\n      let rssFeeds = [];\r\n      let color = \"\";\r\n      try {\r\n        rssFeeds = JSON.parse(localStorage.getItem(\"newsfeeds\"));\r\n        if (Array.isArray(rssFeeds)) {\r\n          feedsStore.setFeeds(rssFeeds);\r\n        } else {\r\n          feedsStore.setFeeds(defaultFeeds);\r\n        }\r\n      } catch (ex) {\r\n        console.log(\"error\" + ex);\r\n      }\r\n      try {\r\n        color = JSON.parse(localStorage.getItem(\"darkmode\"));\r\n        if (color == false || true) {\r\n          feedsStore.setDarkMode(color);\r\n          console.log(color);\r\n        }\r\n      } catch (ex) {\r\n        console.log(\"error\" + ex);\r\n      }\r\n      setInitialized(true);\r\n      console.log(\"Useeffect ran\");\r\n    }\r\n  }, [initialized]);\r\n\r\n  if (redirectToFeed) {\r\n    return (\r\n      <Redirect to={`/feed?${querystring.encode({ url: feedsStore.feed })}`} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      <h1 className=\"center\">RSS Feeds</h1>\r\n      <Button\r\n        variant={feedsStore.darkmode != true ? \"primary\" : \"info\"}\r\n        onClick={() => darkModeSettings(!feedsStore.darkmode)}\r\n      >\r\n        {feedsStore.darkmode != true\r\n          ? \"Turn On Dark Mode\"\r\n          : \"Turn Off Dark Mode\"}\r\n      </Button>\r\n      <br></br>\r\n      <br></br>\r\n      <Formik\r\n        validationSchema={schema}\r\n        onSubmit={handleSubmit}\r\n        initialValues={{ name: \"\", url: \"\" }}\r\n      >\r\n        {({\r\n          handleSubmit,\r\n          handleChange,\r\n          handleBlur,\r\n          values,\r\n          touched,\r\n          isInvalid,\r\n          errors,\r\n        }) => (\r\n          <div>\r\n            <h5>Add a RSS feed</h5>\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n              <Form.Row>\r\n                <Form.Group as={Col} md=\"12\" controlId=\"name\">\r\n                  <Form.Control\r\n                    className={\r\n                      feedsStore.darkmode != true\r\n                        ? \"bg-light\"\r\n                        : \"bg-dark text-light\"\r\n                    }\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Name\"\r\n                    value={values.name || \"\"}\r\n                    onChange={handleChange}\r\n                    isInvalid={touched.name && errors.name}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.name}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group as={Col} md=\"12\" controlId=\"url\">\r\n                  <Form.Control\r\n                    className={\r\n                      feedsStore.darkmode != true\r\n                        ? \"bg-light\"\r\n                        : \"bg-dark text-light\"\r\n                    }\r\n                    type=\"text\"\r\n                    name=\"url\"\r\n                    placeholder=\"URL\"\r\n                    value={values.url || \"\"}\r\n                    onChange={handleChange}\r\n                    isInvalid={touched.url && errors.url}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.url}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Button\r\n                variant={feedsStore.darkmode != true ? \"primary\" : \"info\"}\r\n                type=\"submit\"\r\n              >\r\n                Add\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n        )}\r\n      </Formik>\r\n      <br />\r\n      <Button\r\n        variant={feedsStore.darkmode != true ? \"primary\" : \"info\"}\r\n        onClick={resetSettings}\r\n      >\r\n        Reset to Default Feeds\r\n      </Button>\r\n      <br />\r\n      <br />\r\n\r\n      {feedsStore.feeds.map((f, i) => {\r\n        return (\r\n          <Card key={i}>\r\n            <div\r\n              className={feedsStore.darkmode != true ? \"bg-white\" : \"bg-dark\"}\r\n            >\r\n              <Card.Title\r\n                className={\r\n                  feedsStore.darkmode != true\r\n                    ? \"card-title\"\r\n                    : \"card-title bg-dark text-light \"\r\n                }\r\n              >\r\n                {f.name}\r\n              </Card.Title>\r\n              <Card.Subtitle style={{ paddingLeft: \"20px\" }}>\r\n                {f.url}\r\n              </Card.Subtitle>\r\n              <Card.Body>\r\n                {/* <Button\r\n                  variant=\"primary\"\r\n                  onClick={setSelectedFeed.bind(this, f.url)}\r\n                >\r\n                  Open\r\n                </Button>{\" \"} */}\r\n                <Button\r\n                  variant={feedsStore.darkmode != true ? \"primary\" : \"info\"}\r\n                  onClick={deleteFeed.bind(this, i)}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </Card.Body>\r\n            </div>\r\n          </Card>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\nexport default observer(SettingsPage);\r\n","import React, { useState, useEffect } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport { autorun } from 'mobx';\r\n\r\nfunction TopBar({ feedsStore }) {\r\n\treturn (\r\n\t\t<Navbar bg={feedsStore.darkmode != true ? 'primary' : 'secondary'} expand=\"lg\" variant=\"dark\">\r\n\t\t\t<Navbar.Brand>\r\n\t\t\t\t<Link style={{ color: 'white', textDecoration: 'none' }} to=\"/\">\r\n\t\t\t\t\tNews\r\n\t\t\t\t</Link>\r\n\t\t\t</Navbar.Brand>\r\n\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\r\n\t\t\t\t<Nav className=\"mr-auto\">\r\n\t\t\t\t\t<Nav.Link href=\"https://amit-ghosh.com/\" style={{ color: 'white', textDecoration: 'none' }}>\r\n\t\t\t\t\t\tPortfolio\r\n\t\t\t\t\t</Nav.Link>\r\n\r\n\t\t\t\t\t<Link\r\n\t\t\t\t\t\tstyle={{ color: 'white', textDecoration: 'none' }}\r\n\t\t\t\t\t\tclassName=\"nav-item nav-link active\"\r\n\t\t\t\t\t\tto=\"/settings\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSettings\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</Nav>\r\n\t\t\t</Navbar.Collapse>\r\n\t\t</Navbar>\r\n\t);\r\n}\r\n\r\nexport default observer(TopBar);\r\n","import React, { useState, useEffect } from 'react';\r\nimport ReactTimeAgo from 'react-time-ago';\r\nimport './FeedPage.css';\r\nimport { observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport defaultFeeds from './DefaultFeeds';\r\n// import { getFeedListing } from \"./requests\";\r\nvar Feed = require('rss-to-json');\r\nvar striptags = require('striptags');\r\nvar he = require('he');\r\nlet Parser = require('rss-parser');\r\nlet parser = new Parser();\r\nvar _ = require('lodash');\r\n\r\nfunction HomePage({ feedsStore }) {\r\n\tconst [ initialized, setInitialized ] = useState(false);\r\n\tconst [ allListings, setListings ] = useState([]);\r\n\tlet list = [];\r\n\tconst getListing = async (feed) => {\r\n\t\tawait Feed.load('https://cors-anywhere.herokuapp.com/' + feed.url, function(err, rss) {\r\n\t\t\tif (err) {\r\n\t\t\t\tconsole.log('error' + feed);\r\n\t\t\t} else {\r\n\t\t\t\trss.items.map((item) => (item.sourceName = rss.title));\r\n\t\t\t\tlet newList = _.uniqBy(rss.items, 'title');\r\n\t\t\t\tlist.push(_.uniqBy(rss.items, 'title'));\r\n\t\t\t\tnewList = [];\r\n\t\t\t\tsetListings(list.flat());\r\n\t\t\t\tconsole.log(newList);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tconst getListings = () => {\r\n\t\tconst feeds = feedsStore.feeds;\r\n\t\tfeeds.map(async (feed) => {\r\n\t\t\tawait getListing(feed);\r\n\t\t\tlist = [];\r\n\t\t\tconsole.log('I am updating');\r\n\t\t});\r\n\t};\r\n\r\n\t// const updateListings = () => {\r\n\t//   setInterval(() => {\r\n\t//     getListings();\r\n\t//   }, 600000);\r\n\t// };\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (!initialized) {\r\n\t\t\t\tlet rssFeeds = [];\r\n\t\t\t\tlet color = '';\r\n\t\t\t\ttry {\r\n\t\t\t\t\trssFeeds = JSON.parse(localStorage.getItem('newsfeeds'));\r\n\t\t\t\t\tif (Array.isArray(rssFeeds)) {\r\n\t\t\t\t\t\tfeedsStore.setFeeds(rssFeeds);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfeedsStore.setFeeds(defaultFeeds);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log('error' + ex);\r\n\t\t\t\t}\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcolor = JSON.parse(localStorage.getItem('darkmode'));\r\n\t\t\t\t\tif (color == false || true) {\r\n\t\t\t\t\t\tfeedsStore.setDarkMode(color);\r\n\t\t\t\t\t\tconsole.log(color);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log('error' + ex);\r\n\t\t\t\t}\r\n\t\t\t\tgetListings();\r\n\t\t\t\t// updateListings();\r\n\t\t\t}\r\n\t\t\tsetInitialized(true);\r\n\t\t},\r\n\t\t[ initialized ]\r\n\t);\r\n\r\n\tconst openLink = (url) => {\r\n\t\twindow.open(url);\r\n\t};\r\n\r\n\tif (allListings.length === 0) {\r\n\t\treturn (\r\n\t\t\t<div className=\"feed-page\">\r\n\t\t\t\t<h2> Loading! </h2>{' '}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"feed-page\">\r\n\t\t\t{' '}\r\n\t\t\t{allListings\r\n\t\t\t\t.sort((item1, item2) => {\r\n\t\t\t\t\tvar d1 = new Date(item1.pubDate).getTime();\r\n\t\t\t\t\tvar d2 = new Date(item2.pubDate).getTime();\r\n\t\t\t\t\treturn d2 - d1;\r\n\t\t\t\t})\r\n\t\t\t\t.splice(0, 250)\r\n\t\t\t\t.map((li, i) => {\r\n\t\t\t\t\tif (li.pubDate != undefined) {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Card key={i}>\r\n\t\t\t\t\t\t\t\t<Card.Header\r\n\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\tfeedsStore.darkmode != true ? 'card-title' : 'card-title bg-dark text-light '\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t{li.title}{' '}\r\n\t\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t\t<Card.Body className={feedsStore.darkmode != true ? '' : 'bg-dark'}>\r\n\t\t\t\t\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t\t{he.decode(striptags(li.description).substring(0, 150) + '...')}{' '}\r\n\t\t\t\t\t\t\t\t\t</Card.Text>{' '}\r\n\t\t\t\t\t\t\t\t\t<Card.Text className=\"time-ago\">\r\n\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t<ReactTimeAgo date={new Date(li.pubDate)} />{' '}\r\n\t\t\t\t\t\t\t\t\t\t\t<span> {`  from ${li.sourceName}`} </span>{' '}\r\n\t\t\t\t\t\t\t\t\t\t</span>{' '}\r\n\t\t\t\t\t\t\t\t\t</Card.Text>{' '}\r\n\t\t\t\t\t\t\t\t\t{/* <p>{l.content}</p> */}{' '}\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tvariant={feedsStore.darkmode != true ? 'primary' : 'info'}\r\n\t\t\t\t\t\t\t\t\t\tonClick={openLink.bind(this, li.link)}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tOpen{' '}\r\n\t\t\t\t\t\t\t\t\t</Button>{' '}\r\n\t\t\t\t\t\t\t\t</Card.Body>{' '}\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t})}{' '}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default withRouter(observer(HomePage));\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport SettingsPage from \"./SettingsPage\";\r\nimport \"./App.css\";\r\nimport TopBar from \"./TopBar\";\r\nimport TopFeeds from \"./TopFeeds\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction App({ feedsStore }) {\r\n  return (\r\n    <div\r\n      className={\r\n        feedsStore.darkmode != true ? \"app bg-white\" : \"app bg-dark text-light\"\r\n      }\r\n    >\r\n      <TopBar feedsStore={feedsStore} />\r\n      <Route\r\n        path=\"/\"\r\n        exact\r\n        component={(props) => <TopFeeds {...props} feedsStore={feedsStore} />}\r\n      />\r\n      <Route\r\n        path=\"/settings\"\r\n        exact\r\n        component={(props) => (\r\n          <SettingsPage {...props} feedsStore={feedsStore} />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default observer(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { observable, action, decorate } from \"mobx\";\r\n\r\nclass FeedsStore {\r\n  feeds = [\"Hello\"];\r\n  feed = \"\";\r\n  darkmode = false;\r\n\r\n  setFeeds(feeds) {\r\n    this.feeds = feeds;\r\n  }\r\n\r\n  setSelectedFeed(feed) {\r\n    this.feed = feed;\r\n  }\r\n\r\n  setDarkMode(darkmode) {\r\n    this.darkmode = darkmode;\r\n  }\r\n}\r\n\r\nFeedsStore = decorate(FeedsStore, {\r\n  feeds: observable,\r\n  feed: observable,\r\n  darkmode: observable,\r\n  setDarkMode: action,\r\n  setFeeds: action,\r\n  setSelectedFeed: action,\r\n});\r\n\r\nexport { FeedsStore };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport JavascriptTimeAgo from \"javascript-time-ago\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport en from \"javascript-time-ago/locale/en\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { FeedsStore } from \"./store\";\r\nconst feedsStore = new FeedsStore();\r\n\r\n// The desired locales.\r\n// Initialize the desired locales.\r\nJavascriptTimeAgo.locale(en);\r\n\r\n// console.log = function () {};\r\n\r\nReactDOM.render(\r\n  <Router basename=\"/react-news\">\r\n    <App feedsStore={feedsStore} />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}